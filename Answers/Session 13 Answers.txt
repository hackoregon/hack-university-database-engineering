--1a.Create a table called Words with all 26^3 3-character words and the structure:  ID, word
--option 1
CREATE TABLE Words
(
	ID SERIAL,
	Word VARCHAR
);

DO $$
DECLARE
	letter1 varchar;
	letter2 varchar;
	letter3 varchar;
	all_letters varchar  = 'abcdefghijklmnopqrstuvwxyz';
BEGIN
	for letter1 in (SELECT (REGEXP_MATCHES(all_letters, '.', 'g'))[1])
	LOOP
		for letter2 in (SELECT (REGEXP_MATCHES(all_letters, '.', 'g'))[1])
		LOOP
			for letter3 in (SELECT (REGEXP_MATCHES(all_letters, '.', 'g'))[1])
			LOOP
				--RAISE NOTICE '%', letter1||letter2||letter3;
				INSERT INTO Words (word) SELECT letter1||letter2||letter3;
			END LOOP;
		END LOOP;
	END LOOP;

END;
$$;

--option 2,  I modified this option to do 5 letter words because I wanted my results returned more slowly.
SELECT (REGEXP_MATCHES('abcdefghijklmnopqrstuvwxyz', '.', 'g'))[1] AS l
INTO TEMP letters;

SELECT l1.l ||l2.l||l3.l||l4.l||l5.l as word
INTO Words
FROM letters l1, letters l2, letters l3, letters l4, letters l5;

ALTER TABLE Words ADD ID SERIAL;


--1b.Pull back * where word = 'me%' using in, like, regex, and left.
--SELECT STRING_AGG(''''||word||'''', ', ')
--FROM words
--WHERE word like 'meee_'


SELECT *
FROM words
WHERE word in ('meeea', 'meeeb', 'meeec', 'meeed', 'meeee', 'meeef', 'meeeg', 'meeeh', 'meeei', 'meeej', 'meeek', 'meeel', 'meeem', 'meeen', 'meeeo', 'meeep', 'meeeq', 'meeer', 'meees', 'meeet', 'meeeu', 'meeev', 'meeew', 'meeex', 'meeey', 'meeez')

SELECT *
FROM words
WHERE word like 'meee_'

SELECT *
FROM words
WHERE word ~ '^meee.'

SELECT *
FROM words
WHERE LEFT(word,4) = 'meee'


--1c.Create an index on word and re-execute the queries from 1b.  What happed to the execution time and plan?
CREATE INDEX IX_Words on words (word);
--only the 'in' query was faster.  On some other databases, likes that could be described as "begins with" will use indexes.  Postgres requires us to jump through some technical hoops to get that boost.

--2a.Create a correlated nested subquery on Words.  Look at the execution plan and time.
SELECT o.word, (SELECT word FROM words i WHERE i.word = REVERSE(o.word))
FROM words o
LIMIT 10;

--2b.Drop the index and reexamine the results.
DROP INDEX IX_Words;

--3.Create a regex to match email addresses.
SELECT SUBSTRING('email@email.com' FROM '([a-zA-Z0-9_]+@[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)+)')

--4.Create a regex to match all words from Words that only contain vowels.  That contain exactly two vowels.
SELECT *
FROM Words
WHERE word ~ '^[aeiou]+$'

SELECT *
FROM Words
WHERE word ~ '^(?=([^aeiou]*[aeiou]){2})(?!([^aeiou]*[aeiou]){3})'


--5.Replace multiple spaces in a sentence with a single one using a regex replace.
SELECT REGEXP_REPLACE('This  sentence   has too much     whitespace.', '(\s)\s*', '\1', 'g');

--6.Make an acronym from a sentence using a regex.
SELECT REGEXP_REPLACE('This  sentence   has too much     whitespace.', '(\w)\w*\.*\s*', '\1', 'g');


--7.Make a regex that matches 6 character palindromes.
SELECT (REGEXP_MATCHES('abccba', '^((.)(.)(.)\4\3\2)$'))[1];
